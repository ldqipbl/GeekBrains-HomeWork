from sys import argv

print(int(argv[1]) * int(argv[2]) + int(argv[3]))
'''
element_argv = [int(el) for el in argv[1:]]

print(element_argv[0] * element_argv[1] + element_argv[2])
'''


# 2
'''
    2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.

    Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
'''
random_list = [1, 1, 2, 3, 4, 7, 5, 7, 5, 4]

new_list = [random_list[idx] for idx, count in enumerate(random_list[1:]) if random_list[idx] > count]
    
print(new_list)


# 3
'''
    3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.

    Подсказка: использовать функцию range() и генератор.
'''

[print(number) for number in range(20, 240) if number % 20 == 0 or number % 21 == 0 ]
# 4
'''
    4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
    Сформировать итоговый массив чисел, соответствующих требованию. 
    Элементы вывести в порядке их следования в исходном списке. 
    Для выполнения задания обязательно использовать генератор.
'''
number_list = [4, 5, 4, 7, 2, 5, 4]
enswer = []

[enswer.append(el) for el in number_list for el in number_list[1:] if el not in enswer]

print(enswer)


# 5
'''
    5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
    В список должны войти четные числа от 100 до 1000 (включая границы). 
    Необходимо получить результат вычисления произведения всех элементов списка.
    
    Подсказка: использовать функцию reduce().
'''
from functools import reduce

enswer = [el for el in range(100, 1001) if el % 2 == 0]

def my_func(prev_el, el):
    return prev_el + el

print(reduce(my_func, enswer))


# 6
'''
    6. Реализовать два небольших скрипта:
    а) бесконечный итератор, генерирующий целые числа, начиная с указанного,
    б) бесконечный итератор, повторяющий элементы некоторого списка, определенного заранее.
    
    Подсказка: использовать функцию count() и cycle() модуля itertools.
'''
from itertools import cycle, count

n = 3
for el in count(n):
    if el > 15:
        break
    print(el)


c = 0
for el in cycle('abc'):
    if c > 10:
        break
    print(el)
    c += 1


# 7
'''
    7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
    При вызове функции должен создаваться объект-генератор. 
    Функция должна вызываться следующим образом: for el in fibo_gen(). 
    Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые 15 чисел.
    
    Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
'''
from math import factorial as fact


def fibo_gen():
    for param in range(1, 20):
        yield fact(param)


[print(el) for idx, el in enumerate(fibo_gen()) if idx < 15]


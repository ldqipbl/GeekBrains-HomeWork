# 1
'''
    Реализовать класс Matrix (матрица). 
    Обеспечить перегрузку конструктора класса (метод __init__()), который должен принимать данные (список списков) для формирования матрицы.
    
    Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
    Примеры матриц: 3 на 2, 3 на 3, 2 на 4.

    Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
    Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц). 
    Результатом сложения должна быть новая матрица. 

    Подсказка: сложение элементов матриц выполнять поэлементно — 
        первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.
'''


class Matrix:
    def __init__(self, param):
        self.param = param
        self.new_array_list = []
        
    def __str__(self):
        return f'реализована перегрузка метода __str__() для вывода матрицы в привычном виде {self.param}'

    def __add__(self, other):
        for el_list in range(len(self.param)):
            new_array_list = [self.param[el_list][el] + other.param[el_list][el] for el in range(len(self.param[el_list]))]
            self.new_array_list.append(new_array_list)

        return self.new_array_list


matrix_1 = Matrix([[41, 42, 43], [51, 52, 53], [61, 62, 63]])
matrix_2 = Matrix([[11, 12, 13], [21, 22, 23], [31, 32, 33]])

matrix_3 = matrix_1 + matrix_2

print(matrix_1)
print(matrix_2)
print(matrix_3)


# 2
'''
    Реализовать проект расчета суммарного расхода ткани на производство одежды. 
    Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название. 
    К типам одежды в этом проекте относятся пальто и костюм. 
    У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). 
    Это могут быть обычные числа: V и H, соответственно. 

    Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), для костюма (2*H + 0.3). 
    Проверить работу этих методов на реальных данных.

    Реализовать общий подсчет расхода ткани. 
    Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов проекта, 
        проверить на практике работу декоратора @property.

'''
from abc import ABC, abstractmethod


class Clothes(ABC):
    def __init__(self, name=None, param=0):
        self.name = name
        self.param = param
    
    def __add__(self, other):
        return self.param / 6.5 + 0.5 + (2 * other.param + 0.3)

    @property
    def my_method(self):
        return f'Параметры, переданные в класс: {self.name}, {self.param}'

    @abstractmethod
    def test_decoration(self):
        pass


class Coat(Clothes):
    def test_decoration(self):
        pass


class Costume(Clothes):
    def test_decoration(self):
        pass


coat = Coat('coat', 5)
costume = Costume('costume', 5)

material = coat + costume

print(material)
print(coat.my_method, costume.my_method, sep='\n')

# 3
'''
    Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. 
    В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). 
    В классе должны быть реализованы методы перегрузки арифметических операторов: 
        сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). 
    Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. 
    В методе деления должно осуществляться округление значения до целого числа.

    Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

    Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, 
        иначе выводить соответствующее сообщение.

    Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.

    Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

    В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. 
    Данный метод позволяет организовать ячейки по рядам.
    Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. 
    Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
    Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
    Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

'''
class Cell:
    def __init__(self, count_cell):
        self.count_cell = int(count_cell)

    def __add__(self, other):
        return self.count_cell + other.count_cell

    def __sub__(self, other):
        sub_cell = self.count_cell - other.count_cell
        if sub_cell > 0:
            return sub_cell
        else:
            return 'разность количества ячеек двух клеток меньше нуля'

    def __mul__(self, other):
        return self.count_cell * other.count_cell

    def __truediv__(self, other):
        return int(self.count_cell / other.count_cell)

    def make_order(self, count_cell_in_line):
        line = self.count_cell // count_cell_in_line
        last_line = self.count_cell % count_cell_in_line

        [print('*' * count_cell_in_line) for _ in range(line)]
        if last_line != 0:
            print('*' * last_line)


cell_1 = Cell(12.4)
cell_2 = Cell(15.8)

sum_cell = cell_1 + cell_2
sub_cell = cell_2 - cell_1
mul_cell = cell_1 * cell_2
truediv_cell = cell_1 / cell_2

print(sum_cell, sub_cell, mul_cell, truediv_cell, sep='\n')

cell_1.make_order(5)
cell_2.make_order(5)

